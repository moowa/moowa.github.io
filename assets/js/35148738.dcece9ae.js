"use strict";(self.webpackChunkknowtes=self.webpackChunkknowtes||[]).push([[8900],{5788:(e,t,r)=>{r.d(t,{Iu:()=>c,yg:()=>y});var i=r(1504);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=i.createContext({}),u=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),g=n,y=p["".concat(l,".").concat(g)]||p[g]||d[g]||o;return r?i.createElement(y,a(a({ref:t},c),{},{components:r})):i.createElement(y,a({ref:t},c))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,a[1]=s;for(var u=2;u<o;u++)a[u]=r[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}g.displayName="MDXCreateElement"},6672:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var i=r(5072),n=(r(1504),r(5788));const o={tags:["developer tools","github actions","ci/cd"],sidebar_class_name:"hidden"},a="GitHub Actions",s={unversionedId:"knowtes/github_actions",id:"knowtes/github_actions",title:"GitHub Actions",description:"GitHub Actions is a platform that allows you to create continuous integration and continuous delivery (CI/CD) pipelines to automate your build and deployment workflows.",source:"@site/docs/knowtes/github_actions.md",sourceDirName:"knowtes",slug:"/knowtes/github_actions",permalink:"/docs/knowtes/github_actions",draft:!1,tags:[{label:"developer tools",permalink:"/docs/tags/developer-tools"},{label:"github actions",permalink:"/docs/tags/github-actions"},{label:"ci/cd",permalink:"/docs/tags/ci-cd"}],version:"current",frontMatter:{tags:["developer tools","github actions","ci/cd"],sidebar_class_name:"hidden"},sidebar:"tutorialSidebar",previous:{title:"Git",permalink:"/docs/knowtes/git"},next:{title:"Python http server",permalink:"/docs/knowtes/http_server"}},l={},u=[{value:"Example Use Case: Deploying Docusaurus",id:"example-use-case-deploying-docusaurus",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.yg)(p,(0,i.c)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"github-actions"},"GitHub Actions"),(0,n.yg)("p",null,"GitHub Actions is a platform that allows you to create continuous integration and continuous delivery (CI/CD) pipelines to automate your build and deployment workflows. "),(0,n.yg)("p",null,"Refer to ",(0,n.yg)("a",{parentName:"p",href:"https://docs.github.com/en/actions/quickstart"},"Quickstart"),"\u2197\ufe0f for a brief example of a workflow."),(0,n.yg)("p",null,"Components:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Workflow - defines the automated process that will run one or more tasks when an event is triggered. It is configured with YAML file/s in the ",(0,n.yg)("inlineCode",{parentName:"li"},".github/workflows")," directory in a repository."),(0,n.yg)("li",{parentName:"ul"},"Event - when this activity occurs in a repository, it triggers the corresponding workflow to run. An event could be a pushed commit, scheduled at specific periods or triggered manually. "),(0,n.yg)("li",{parentName:"ul"},"Job - a set of steps defined in a workflow that is performed by the same runner. A step could be a shell script or an action that can be run."),(0,n.yg)("li",{parentName:"ul"},"Action - frequently repeated task, may be custom made or reused from marketplace."),(0,n.yg)("li",{parentName:"ul"},"Runner - server that runs a workflow when it is triggred by an event.  ")),(0,n.yg)("h2",{id:"example-use-case-deploying-docusaurus"},"Example Use Case: Deploying Docusaurus"),(0,n.yg)("p",null,"Code for Docusaurus may be kept in a private repository (source), while the static build to be deployed in GitHub Pages can be in a separate public repository (destination/external). We will use GitHub Actions for seamless build whenever we push our code to the private repository."),(0,n.yg)("p",null,"Specifically, we will configure our GitHub Actions workflow to:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Checkout the code from the source repo."),(0,n.yg)("li",{parentName:"ol"},"Set up node, install dependencies and build the static Docusaurus site."),(0,n.yg)("li",{parentName:"ol"},"Publish the static code to an external public github.io repository.")),(0,n.yg)("p",null,"This workflow is triggered whenever code is pushed in the private repo."),(0,n.yg)("p",null,"Steps:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Create YAML workflow file in the directory ",(0,n.yg)("inlineCode",{parentName:"li"},".github/workflows")," in the source repository (private)."),(0,n.yg)("li",{parentName:"ol"},"Use action ",(0,n.yg)("inlineCode",{parentName:"li"},"peaceiris/actions-gh-pages@v3")," to deploy static pages. Set external repository as ",(0,n.yg)("inlineCode",{parentName:"li"},"<username>/<username>.github.io"),". ",(0,n.yg)("inlineCode",{parentName:"li"},"publish_dir")," is where the static pages are typically written in the source repository (usually ",(0,n.yg)("inlineCode",{parentName:"li"},"./build")," for docusaurus). ",(0,n.yg)("inlineCode",{parentName:"li"},"publish_branch")," is the branch in the destination repository (",(0,n.yg)("inlineCode",{parentName:"li"},"main"),") where the static pages will be copied."),(0,n.yg)("li",{parentName:"ol"},"Set up public and private keys using ",(0,n.yg)("inlineCode",{parentName:"li"},'ssh-keygen -t rsa -b 4096 -C "$(git config user.email)" -f gh-pages -N ""'),"\nThis will generate two files: ",(0,n.yg)("inlineCode",{parentName:"li"},"gh-pages.pub")," is the public key that you need to configure in the destination public repo's deploy keys (allow write access), and ",(0,n.yg)("inlineCode",{parentName:"li"},"gh-pages")," is the private key that you need to configure in the source repo's secrets. Refer to ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key"},"peaceiris"),"\u2197\ufe0f for sample screenshots.\nTip \ud83d\udca1: Use VSCode to view/copy the keys.")),(0,n.yg)("p",null,"Reference:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://medium.com/@nathvichea/github-action-to-deploy-docusaurus-8c297eaf1514"},"GitHub Action to Deploy Docusaurus"),"\u2197\ufe0f"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/peaceiris/actions-gh-pages"},"peaceiris GitHub Actions for GitHub Pages"),"\u2197\ufe0f")))}d.isMDXComponent=!0}}]);