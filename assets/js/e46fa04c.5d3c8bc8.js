"use strict";(self.webpackChunkknowtes=self.webpackChunkknowtes||[]).push([[4172],{7409:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"knowtes/azure_powershell","title":"Azure PowerShell","description":"- cmdlets to work with Azure features in PowerShell","source":"@site/docs/knowtes/azure_powershell.md","sourceDirName":"knowtes","slug":"/knowtes/azure_powershell","permalink":"/docs/knowtes/azure_powershell","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"developer tools","permalink":"/docs/tags/developer-tools"},{"inline":true,"label":"azure","permalink":"/docs/tags/azure"},{"inline":true,"label":"powershell","permalink":"/docs/tags/powershell"}],"version":"current","frontMatter":{"tags":["developer tools","azure","powershell"],"sidebar_class_name":"hidden"},"sidebar":"tutorialSidebar","previous":{"title":"Alembic","permalink":"/docs/knowtes/alembic"},"next":{"title":"Conda","permalink":"/docs/knowtes/conda"}}');var o=s(4848),i=s(8453);const t={tags:["developer tools","azure","powershell"],sidebar_class_name:"hidden"},a="Azure PowerShell",l={},c=[{value:"Basic commands",id:"basic-commands",level:2},{value:"PowerShell Scripts",id:"powershell-scripts",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"azure-powershell",children:"Azure PowerShell"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"cmdlets to work with Azure features in PowerShell"}),"\n",(0,o.jsxs)(r.li,{children:["installation and other commands ",(0,o.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/training/modules/automate-azure-tasks-with-powershell/5-create-resource-interactively?pivots=windows",children:"here"}),"\u2197\ufe0f"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"basic-commands",children:"Basic commands"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Connect-AzAccount"})," - prompts for Azure credentials then connects to your Azure subscription"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Get-AzContext"})," - used to determine currently active subscription"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Get-AzSubscription"})," - returns list of all subscription names in your account"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Set-AzContext -Subscription <Subscription ID>"})," - change active subscription to given Subscription ID"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Get-AzResourceGroup"})," - returns list of all Resource Groups in the active subscription; optionally, do ",(0,o.jsx)(r.code,{children:"Get-AzResourceGroup | Format-Table"})," for a more concise view"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"New-AzResourceGroup -Name <name> -Location <location>"})," - create a new resource group"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Get-AzResource"})," - returns list of your Azure resources"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"New-AzVM -ResourceGroupName <resource group name> -Name <machine name> -Credential <credentials object> -Location <location> -Image <image name>"})," - create a new virtual machine"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Remove-AzVM"})," - delete an Azure virtual machine"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Start-AzVM"})," - starts a stopped VM"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Stop-AzVM"})," - stops a running VM"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Restart-AzVM"})," - restarts a VM"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Update-AzVM"})," - updates the configuration for a VM"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"Get-AzVM -Status"})," - returns list of VMs in active subscription"]}),"\n",(0,o.jsx)(r.li,{children:"Example VM Creation:"}),"\n"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'New-AzVM -ResourceGroupName <resource group name> -Name "testvm-auseast-01" -Location "australiasoutheast" -Image "Canonical:0001-com-ubuntu-server-focal:20_04-lts:latest" -Credential (Get-Credential) -OpenPorts 22 -PublicIpAddressName "testvmip-auseast-01"\n'})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Create variable for easier reference: ",(0,o.jsx)(r.code,{children:"$vm = (Get-AzVM -Name <vm name> -ResourceGroupName <resource group name>)"})]}),"\n",(0,o.jsx)(r.li,{children:"To cleanup, after deleting VM, delete network interface, managed OS disks, virtual network, network security group and public IP address:"}),"\n"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-pwsh",children:"$vm | Remove-AzNetworkInterface \u2013Force\nGet-AzDisk -ResourceGroupName $vm.ResourceGroupName -DiskName $vm.StorageProfile.OSDisk.Name | Remove-AzDisk -Force\nGet-AzVirtualNetwork -ResourceGroupName $vm.ResourceGroupName | Remove-AzVirtualNetwork -Force\nGet-AzNetworkSecurityGroup -ResourceGroupName $vm.ResourceGroupName | Remove-AzNetworkSecurityGroup -Force\nGet-AzPublicIpAddress -ResourceGroupName $vm.ResourceGroupName | Remove-AzPublicIpAddress -Force\n"})}),"\n",(0,o.jsx)(r.h2,{id:"powershell-scripts",children:"PowerShell Scripts"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/training/modules/automate-azure-tasks-with-powershell/7-create-resource-using-script",children:"reference"}),"\u2197\ufe0f"]}),"\n",(0,o.jsx)(r.li,{children:"file extension .ps1"}),"\n",(0,o.jsxs)(r.li,{children:["execute scripts in command line using: ",(0,o.jsx)(r.code,{children:".\\myScript.ps1"})]}),"\n",(0,o.jsxs)(r.li,{children:["declare a variable using ",(0,o.jsx)(r.code,{children:"$"})," and assign a value using ",(0,o.jsx)(r.code,{children:"="}),". For example ",(0,o.jsx)(r.code,{children:'$loc = "East US"'})," You may also use variables to hold objects returned by cmdlets. For example, ",(0,o.jsx)(r.code,{children:"$adminCredential = Get-Credential"})," To get the value stored in a variable, use ",(0,o.jsx)(r.code,{children:"$"})," and its name."]}),"\n",(0,o.jsxs)(r.li,{children:["use parameters by passing arguments on the command line. For example, in the command line, call ",(0,o.jsx)(r.code,{children:'.\\setupEnvironment.ps1 -size 5 -location "East US"'})," and inside the script, get the parameter values through variables ",(0,o.jsx)(r.code,{children:"param([string]$location, [int]$size)"}),"."]}),"\n",(0,o.jsx)(r.li,{children:"Example script:"}),"\n"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-pwsh",metastring:'title="setupEnvironment.ps1"',children:'param([string]$resourceGroup)\n\n$adminCredential = Get-Credential -Message "Enter a username and password for the VM administrator."\n\nFor ($i = 1; $i -le 3; $i++)\n{\n    $vmName = "ConferenceDemo" + $i\n    Write-Host "Creating VM: " $vmName\n    New-AzVm -ResourceGroupName $resourceGroup -Name $vmName -Credential $adminCredential -Image Canonical:0001-com-ubuntu-server-focal:20_04-lts:latest\n}\n'})}),"\n",(0,o.jsxs)(r.p,{children:["Then run using ",(0,o.jsx)(r.code,{children:"./ConferenceDailyReset.ps1 <resource group name>"})]})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>a});var n=s(6540);const o={},i=n.createContext(o);function t(e){const r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);