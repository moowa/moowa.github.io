"use strict";(self.webpackChunkknowtes=self.webpackChunkknowtes||[]).push([[2080],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>h});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),m=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(i),u=a,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||r;return i?n.createElement(h,l(l({ref:t},p),{},{components:i})):n.createElement(h,l({ref:t},p))}));function h(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var m=2;m<r;m++)l[m]=i[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},3059:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var n=i(7462),a=(i(7294),i(3905));const r={tags:["developer tools","git"],sidebar_class_name:"hidden"},l="Git",o={unversionedId:"knowtes/git",id:"knowtes/git",title:"Git",description:"Branch",source:"@site/docs/knowtes/git.md",sourceDirName:"knowtes",slug:"/knowtes/git",permalink:"/docs/knowtes/git",draft:!1,tags:[{label:"developer tools",permalink:"/docs/tags/developer-tools"},{label:"git",permalink:"/docs/tags/git"}],version:"current",frontMatter:{tags:["developer tools","git"],sidebar_class_name:"hidden"},sidebar:"tutorialSidebar",previous:{title:"f-strings",permalink:"/docs/knowtes/fstring"},next:{title:"Python http server",permalink:"/docs/knowtes/http_server"}},s={},m=[{value:"Branch",id:"branch",level:2},{value:"Push",id:"push",level:2},{value:"Commit",id:"commit",level:2},{value:"Rebase",id:"rebase",level:2},{value:"Edit previously pushed changes",id:"edit-previously-pushed-changes",level:3},{value:"Diff",id:"diff",level:2},{value:"Stash",id:"stash",level:2},{value:"Starting a new git repository",id:"starting-a-new-git-repository",level:2},{value:"Example Cherry-picking",id:"example-cherry-picking",level:2},{value:"Example git merge",id:"example-git-merge",level:2},{value:"Others",id:"others",level:2}],p={toc:m},c="wrapper";function d(e){let{components:t,...i}=e;return(0,a.kt)(c,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"git"},"Git"),(0,a.kt)("h2",{id:"branch"},"Branch"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git checkout -b <branchname>")," - create new branch"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git checkout <branchname>")," - go to specific branch"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git branch -a")," - list all branches including remote"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git branch")," - list all local branches")),(0,a.kt)("h2",{id:"push"},"Push"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git push --set-upstream origin <branchname>")," - when you have created a local branch and want to push the branch to remote")),(0,a.kt)("h2",{id:"commit"},"Commit"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git reset --soft HEAD~1")," - undo last commit but local modifications remain in uncommitted state (i.e., your changes are still there)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git reset --hard HEAD~1")," - undo last commit and remove local modifications (i.e., goodbye, changes)")),(0,a.kt)("h2",{id:"rebase"},"Rebase"),(0,a.kt)("p",null,"Scenario: Performed CommitA but forgot to include some files."),(0,a.kt)("p",null,"Solution: "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Perform CommitB by including all files needeed. There is no need to put fancy commit message, since we will use the previous commit message."),(0,a.kt)("li",{parentName:"ol"},"Do ",(0,a.kt)("inlineCode",{parentName:"li"},"git rebase -i HEAD~2")),(0,a.kt)("li",{parentName:"ol"},"In the editor that will come out, indicate and save:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"pick CommitA\nfixup CommitB\n")))),(0,a.kt)("h3",{id:"edit-previously-pushed-changes"},"Edit previously pushed changes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u276f git commit -m 'f'\n[main 66312e1] f\n\u276f git rebase -i HEAD~2\nSuccessfully rebased and updated refs/heads/main.\n\u276f git log\n\u276f git show e00a7a179063edc66359c0167\n\u276f git push --force-with-lease\n")),(0,a.kt)("h2",{id:"diff"},"Diff"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check diff between two branches ",(0,a.kt)("a",{parentName:"li",href:"https://devconnected.com/how-to-compare-two-git-branches/"},"how to compare two branches"),"\u2197\ufe0f"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git diff <branch1>..<branch2>"),' - (two dots) compare "endpoints" of the two branches'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git diff <branch1>...<branch2>"),' - (three dots) compare the "endpoint" of branch2 with the common ancestor (where branch2 was forked) of the 2 branches'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git diff --name-only")," - list filenames of modified files, including mode changes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git diff --name-only -G.")," - list filenames of modified files, ignoring mode changes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git diff --sumary")," - list filenames and mode changes (may include file modification)")),(0,a.kt)("h2",{id:"stash"},"Stash"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git stash pop stash@{stash_index}")," - pop specific index"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git stash show -p stash@{stash_index} --name-only")," - show filenames of modified files in stash_index"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git stash show -p stash@{stash_index}")," - "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'git stash push -m "with mods for db retention"')," - include a message/label during stashing"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git stash apply")," - apply changes from latest stash stack, but do not remove from stack (not pop)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git stash clear")," - remove everything from stash"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git stash drop stash@{stash_index}")," - remove particular stash index from stash"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git stash list --name-status")," - show list of stashes along with modified files and their status")),(0,a.kt)("h2",{id:"starting-a-new-git-repository"},"Starting a new git repository"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Inside project directory, do ",(0,a.kt)("inlineCode",{parentName:"p"},"git init"),", then add and commit. The files will now be in a local repository.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In github, create a new repo. Then locally, do"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"git remote add origin git@github.com:<user>/<repo_name>.git\ngit branch -M main\ngit push -u origin main \n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://kbroman.org/github_tutorial/pages/init.html"},"tutorial for new git repo"),"\u2197\ufe0f"))),(0,a.kt)("h2",{id:"example-cherry-picking"},"Example Cherry-picking"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git log")," to get commit hash"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git show")," to check which hash to revert to"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git revert <hash>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git cherry-pick <hash>")),(0,a.kt)("li",{parentName:"ul"},"modify files as needed"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git add")," changed files"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git cherry-pick --continue")," to continue cherry-picking")),(0,a.kt)("h2",{id:"example-git-merge"},"Example git merge"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Original branch: master"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git checkout -b <new_branch>")),(0,a.kt)("li",{parentName:"ul"},"Do modifications and commit."),(0,a.kt)("li",{parentName:"ul"},"Go to master: ",(0,a.kt)("inlineCode",{parentName:"li"},"git checkout master")),(0,a.kt)("li",{parentName:"ul"},"Do merge: ",(0,a.kt)("inlineCode",{parentName:"li"},"git merge <new_branch>")),(0,a.kt)("li",{parentName:"ul"},"If merge is okay, and ",(0,a.kt)("inlineCode",{parentName:"li"},"<new_branch>")," can be deleted, do ",(0,a.kt)("inlineCode",{parentName:"li"},"git branch -d <new_branch>")),(0,a.kt)("li",{parentName:"ul"},'If there are conflicts, resolve them and ensure all have been resolved by finding "<<<<" and ">>>>".'),(0,a.kt)("li",{parentName:"ul"},"Do ",(0,a.kt)("inlineCode",{parentName:"li"},"git commit"),'. This will have a default commit message of "Merge branch ',(0,a.kt)("inlineCode",{parentName:"li"},"<new_branch>"),'".')),(0,a.kt)("h2",{id:"others"},"Others"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git mv -f <source> <dest>")," - move or rename files in git, use ",(0,a.kt)("inlineCode",{parentName:"li"},"-f")," if destination exists and you want to overwrite it"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git restore <filename>")," - discard changes in working directory")))}d.isMDXComponent=!0}}]);